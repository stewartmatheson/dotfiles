local wibox = require("wibox")
local beautiful = require("beautiful")
local volume = require("./volume")
local awful = require("awful")
local gears = require("gears")
local dpi   = require("beautiful.xresources").apply_dpi
local menubar = require("menubar")

local terminal = "alacritty"
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
local modkey = "Mod4"

local theme_dir = os.getenv("HOME") .. "/.config/awesome/themes/stew-orig"
local theme = {
    font = "ubuntu 14",
    wallpaper = theme_dir .. "/wallpaper.jpg",
    bg_focus = "#00000000",
    widget_vol = theme_dir .. "/icons/vol.png",
    highlight = "#33ccff",
    tilebar_background = "#00000033",
    useless_gap = dpi(20)
}

awful.layout.layouts = { awful.layout.suit.tile }

local function wrap_widget_in_titlebar_container(widget, icon_image_path) 
    return {
        {
            {
                widget,
                wibox.widget.imagebox(icon_image_path),
                layout = wibox.layout.align.horizontal
            },
            bottom = 2,
            color = theme.highlight,
            widget = wibox.container.margin
        },
        left = 0, 
        right = 10,
        layout = wibox.container.margin
    }
end

beautiful.init(theme)

local mytextclock = wibox.widget.textclock()
local volume_module = volume(theme)

local keys = gears.table.join(
    volume_module.keys,
    awful.key({ modkey, }, "Return", function()
        awful.spawn(terminal)
    end),

    awful.key(
        { modkey }, 
        "p", 
        function() 
            menubar.show() 
        end,
        {description = "show the menubar", group = "launcher"}
    )
)

root.keys(keys)

local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        -- If wallpaper is a function, call it with the screen
        if type(wallpaper) == "function" then
            wallpaper = wallpaper(s)
        end
        print(wallpaper)
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(function(s) 
    set_wallpaper(s)
    awful.tag({ "Home", "2", "3", "4", "5", "6", "7", "8", "9" }, s, awful.layout.layouts[1])
    
    s.mywibox = awful.wibar({ 
		position = "top", 
		screen = s,
        bg = "#00000066",
	})

    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons,
        style = {
            bg_focus = "#00000000",
            bg_normal = "#00000000"
        }
    }

    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { --Left widgets 
        	layout = wibox.layout.align.horizontal
		},
       s.mytasklist,
        { -- Right widgets
        	layout = wibox.layout.align.horizontal,
            wrap_widget_in_titlebar_container(volume_module.widget, theme.widget_vol),
            wrap_widget_in_titlebar_container(mytextclock)
        },
    }
end)


client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = true }
    },

    -- Set Firefox to always map on the tag named "2" on screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { screen = 1, tag = "2" } },
}

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = gears.table.join(
        awful.button({ }, 1, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.resize(c)
        end)
    )

    local round_button = wibox.widget {
        fit    = function(self, context, width, height)
            return width, width -- A square taking the full height
        end,
        draw   = function(self, context, cr, width, height)
            cr:set_source_rgb(0.2, 0.8, 1) -- Red
            cr:arc(height/2, height/2, height/2, 0, math.pi*2)
            cr:fill()
        end,
        layout = wibox.widget.base.make_widget,
    }

    local contained_round_button = {
        round_button,
        left = dpi(18),
        right = dpi(18),
        top = dpi(18),
        bottom = dpi(0),
        widget = wibox.container.margin
    }

    round_button:buttons(
        gears.table.join(
            awful.button({ }, 1, function()
                awful.mouse.client.close(c)
            end)
        )
    )

    local left_titlebar = awful.titlebar(
        c, 
        { 
            size = 40,
            position = "left",
            bg_normal = "#222222",
            bg_focus = "#222222"
        }
    )

    left_titlebar : setup {
        { -- Left
            --awful.titlebar.widget.iconwidget(c),
            contained_round_button,
            contained_round_button,
            contained_round_button,
            layout  = wibox.layout.fixed.vertical(),
        },
        { -- Middle
            layout  = wibox.layout.flex.vertical(),
            buttons = buttons
        },
        { -- Right
            layout = wibox.layout.fixed.vertical(),
            buttons = buttons
        },
        layout = wibox.layout.align.vertical

    }

end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)

-- For debugging
awful.spawn(terminal)
